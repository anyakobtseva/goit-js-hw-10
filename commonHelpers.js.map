{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Описаний в документації\nimport flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\n\n// Додатковий імпорт стилів\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\nconst startButton = document.querySelector('[data-start]');\nconst coundtdownElements = {\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\n\nconst picker = 'input#datetime-picker';\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = Date.parse(selectedDates[0]);\n    if (userSelectedDate <= Date.now()) {\n      startButton.disabled = true;\n      iziToast.error({\n        position: 'topRight',\n        close: false,\n        closeOnClick: true,\n        closeOnEscape: true,\n        icon: null,\n        message: '❌ Please choose a date in the future',\n      });\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(picker, options);\n\nstartButton.addEventListener('click', async () => {\n  let timeDiff;\n  while (\n    (timeDiff = userSelectedDate - Date.now()) &&\n    timeDiff > 0 &&\n    new Date(timeDiff).getSeconds() >= 0\n  ) {\n    updateDateElements(convertMs(timeDiff));\n    await delay(1000);\n  }\n});\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction updateDateElements(newValues) {\n  Object.keys(newValues).forEach(key =>\n    coundtdownElements[key]\n      ? (coundtdownElements[key].textContent = addLeadingZero(\n          newValues[key].toString()\n        ))\n      : console.log(`Unknown element ${key}`)\n  );\n}\n\nfunction addLeadingZero(value) {\n  return value.padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["userSelectedDate","startButton","coundtdownElements","picker","options","selectedDates","iziToast","flatpickr","timeDiff","updateDateElements","convertMs","delay","ms","resolve","newValues","key","addLeadingZero","value","days","hours","minutes","seconds"],"mappings":"sFAQA,IAAIA,EACJ,MAAMC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAqB,CACzB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAEMC,EAAS,wBACTC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBL,EAAmB,KAAK,MAAMK,EAAc,EAAE,EAC1CL,GAAoB,KAAK,OAC3BC,EAAY,SAAW,GACvBK,EAAS,MAAM,CACb,SAAU,WACV,MAAO,GACP,aAAc,GACd,cAAe,GACf,KAAM,KACN,QAAS,sCACjB,CAAO,GAEDL,EAAY,SAAW,EAE1B,CACH,EAEAM,EAAUJ,EAAQC,CAAO,EAEzBH,EAAY,iBAAiB,QAAS,SAAY,CAChD,IAAIO,EACJ,MACGA,EAAWR,EAAmB,KAAK,IAAK,IACzCQ,EAAW,GACX,IAAI,KAAKA,CAAQ,EAAE,WAAY,GAAI,GAEnCC,EAAmBC,EAAUF,CAAQ,CAAC,EACtC,MAAMG,EAAM,GAAI,CAEpB,CAAC,EAED,MAAMA,EAAQC,GAAM,IAAI,QAAQC,GAAW,WAAWA,EAASD,CAAE,CAAC,EAElE,SAASH,EAAmBK,EAAW,CACrC,OAAO,KAAKA,CAAS,EAAE,QAAQC,GAC7Bb,EAAmBa,GACdb,EAAmBa,GAAK,YAAcC,EACrCF,EAAUC,GAAK,SAAU,CAC1B,EACD,QAAQ,IAAI,mBAAmBA,GAAK,CAC5C,CACA,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAS,EAAG,GAAG,CAC9B,CAEA,SAASP,EAAUE,EAAI,CAQrB,MAAMM,EAAO,KAAK,MAAMN,EAAK,KAAG,EAE1BO,EAAQ,KAAK,MAAOP,EAAK,MAAO,IAAI,EAEpCQ,EAAU,KAAK,MAAQR,EAAK,MAAO,KAAQ,GAAM,EAEjDS,EAAU,KAAK,MAAST,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAM,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}